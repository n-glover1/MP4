/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MP4Package;

import java.io.*;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Noah
 */
public class MP4JFrame extends javax.swing.JFrame {

    Room[] rooms = new Room[21];
    Object[] objects = new Object[8];
    MainCharacter you;

    /**
     * Creates new form MP4JFrame
     * @throws java.io.IOException
     */
    public MP4JFrame() throws IOException {
        initComponents();
        PrintWriter writer = new PrintWriter("src\\TextDocuments\\outputText.txt", "UTF-8");
        writer.close();
        createRooms(rooms);
        you = new MainCharacter(rooms[0]);
        createRoomDescriptions(rooms);
        createObjects(objects);
        setupRoomImages(rooms[0], you);
        placeObjectsInRoom(objects, rooms);
        updateInfoPanel(rooms[0].getDescription());
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        CommandLine = new javax.swing.JTextField();
        Map = new javax.swing.JLabel();
        RoomImage = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        OldTextInfo = new javax.swing.JTextArea();
        submitCommand = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        score = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        CommandLine.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        CommandLine.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        CommandLine.setText("Enter Commands Here");

        Map.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Pokagon-map.jpg"))); // NOI18N

        RoomImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/EnteranceSign.jpg"))); // NOI18N

        OldTextInfo.setEditable(false);
        OldTextInfo.setColumns(20);
        OldTextInfo.setLineWrap(true);
        OldTextInfo.setRows(5);
        OldTextInfo.setWrapStyleWord(true);
        jScrollPane1.setViewportView(OldTextInfo);

        submitCommand.setText("Submit");
        submitCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitCommandActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Score:");

        score.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        score.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(CommandLine, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(submitCommand))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Map, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(69, 69, 69)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(score)))
                    .addComponent(RoomImage, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(613, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CommandLine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(submitCommand))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Map, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(score)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(RoomImage, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(85, 85, 85))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitCommandActionPerformed
        String command;
        int score = 0;
        Room currentRoom;
        int[] surroundings = new int[4];
        command = CommandLine.getText();
        command = command.toUpperCase();

        if (command == "EXIT") {
            System.exit(0);
        }
        currentRoom = you.getRoom();
        surroundings = currentRoom.getSurrounding();
        setupRoomImages(currentRoom, you);
        //Movement Commands
        if (command.contains("NORTH")) {
            if (surroundings[0] < 0) {
                try {
                    updateInfoPanel("Invalid Move Location");
                } catch (IOException ex) {
                    Logger.getLogger(MP4JFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                you.setLocation(rooms[surroundings[0]]);
                currentRoom = you.getRoom();
                setupRoomImages(currentRoom, you);
                try {
                    updateInfoPanel(you.getRoom().getDescription());
                } catch (IOException ex) {
                    Logger.getLogger(MP4JFrame.class.getName()).log(Level.SEVERE, null, ex);
                }

            }

        }
        if (command.contains("EAST")) {
            if (surroundings[1] < 0) {
                try {
                    updateInfoPanel("Invalid Move Location");
                } catch (IOException ex) {
                    Logger.getLogger(MP4JFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                you.setLocation(rooms[surroundings[1]]);
                currentRoom = you.getRoom();
                setupRoomImages(currentRoom, you);
                try {
                    updateInfoPanel(you.getRoom().getDescription());
                } catch (IOException ex) {
                    Logger.getLogger(MP4JFrame.class.getName()).log(Level.SEVERE, null, ex);
                }

            }

        }
        if (command.contains("SOUTH")) {
            if (surroundings[2] < 0) {
                try {
                    updateInfoPanel("Invalid Move Location");
                } catch (IOException ex) {
                    Logger.getLogger(MP4JFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                you.setLocation(rooms[surroundings[2]]);
                currentRoom = you.getRoom();
                setupRoomImages(currentRoom, you);
                try {
                    updateInfoPanel(you.getRoom().getDescription());
                } catch (IOException ex) {
                    Logger.getLogger(MP4JFrame.class.getName()).log(Level.SEVERE, null, ex);
                }

            }

        }
        if (command.contains("WEST")) {
            if (surroundings[3] < 0) {
                try {
                    updateInfoPanel("Invalid Move Location");
                } catch (IOException ex) {
                    Logger.getLogger(MP4JFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                you.setLocation(rooms[surroundings[3]]);
                currentRoom = you.getRoom();
                setupRoomImages(currentRoom, you);
                try {
                    updateInfoPanel(you.getRoom().getDescription());
                } catch (IOException ex) {
                    Logger.getLogger(MP4JFrame.class.getName()).log(Level.SEVERE, null, ex);
                }

            }

        }
        //Item Spawns
        if (command.contains("TAKE")) {
            if (currentRoom.getRoomObject() == null) {
                try {
                    updateInfoPanel("There is no item at the " + currentRoom.getRoomName());
                } catch (IOException ex) {
                    Logger.getLogger(MP4JFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (currentRoom.getRoomNum() == 19) {
                if (!you.isBeingHelped()) {
                    try {
                        updateInfoPanel("You cannot pick up that object by yourself. You need to YELL to get someone's help");
                    } catch (IOException ex) {
                        Logger.getLogger(MP4JFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    String objectName = currentRoom.getRoomObject().getName();
                    you.addObject(currentRoom.getRoomObject());
                    currentRoom.takeObject();
                    try {
                        updateInfoPanel(objectName + " added to your inventory");
                    } catch (IOException ex) {
                        Logger.getLogger(MP4JFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            } else {
                String objectName = currentRoom.getRoomObject().getName();
                you.addObject(currentRoom.getRoomObject());
                currentRoom.takeObject();
                try {
                    updateInfoPanel(objectName + " added to your inventory");
                } catch (IOException ex) {
                    Logger.getLogger(MP4JFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        if (command.contains("DROP")) {
            if (currentRoom.getRoomNum() != 2) {
                try {
                    updateInfoPanel("We are not at the Inn. We do no want to liter and leave these objects on the trails.");
                } catch (IOException ex) {
                    Logger.getLogger(MP4JFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else {
                int temp = 0;
                score = you.removeAllObjects();
                you.updateScore(score * 5);
                try {
                    updateInfoPanel("Items dropped off at the Inn. You added " + (score*5) + " to your total score." );
                } catch (IOException ex) {
                    Logger.getLogger(MP4JFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                for (int i = 0; i < rooms.length; i++) {
                    temp = i;
                    if (rooms[i].getRoomObject() != null) {
                        break;
                    }
                    if (temp == 20) {
                        JOptionPane.showMessageDialog(this, "Game over. Youre final Score was: " + you.getScore() + ". Thank you for playing. I hope you enjoyed your tour of Pokagon Park.");
                        System.exit(0);
                    }
                }

            }
        }
        if (command.contains("YELL")) {
            try {
                updateInfoPanel(you.Yell());
            } catch (IOException ex) {
                Logger.getLogger(MP4JFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            you.isBeingHelped();
        }
        
    }//GEN-LAST:event_submitCommandActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MP4JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MP4JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MP4JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MP4JFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MP4JFrame().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(MP4JFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

    }

    /**
     * creates all the rooms
     * @param rooms
     * @throws FileNotFoundException
     * @throws IOException
     */
    public void createRooms(Room[] rooms) throws FileNotFoundException, IOException {
        int temp = 0;
        String input;
        int roomNum = 0;
        String roomName = "";
        int north = -2;
        int south = -2;
        int east = -2;
        int west = -2;
        int[] surroundings = new int[4];
        FileReader fr = new FileReader("src\\TextDocuments\\TrailRoomMap.txt");
        BufferedReader br = new BufferedReader(fr);
        while ((input = br.readLine()) != null) {

            for (int i = 0; i < input.length(); i++) {
                if (input.charAt(i) == '-' && input.charAt(i + 1) == '-') {
                    roomNum = Integer.parseInt(input.substring(0, i));
                    input = input.substring(i + 2);
                    break;
                }
            }
            for (int i = 0; i < input.length(); i++) {
                if (input.charAt(i) == '-' && input.charAt(i + 1) == '-') {
                    roomName = input.substring(0, i);
                    input = input.substring(i + 3);
                    break;
                }
            }
            for (int i = 0; i < input.length(); i++) {
                if (input.charAt(i) == ',') {
                    north = Integer.parseInt(input.substring(0, i));
                    input = input.substring(i + 1);
                    break;
                }
            }
            for (int i = 0; i < input.length(); i++) {
                if (input.charAt(i) == ',') {
                    east = Integer.parseInt(input.substring(0, i));
                    input = input.substring(i + 1);
                    break;
                }
            }
            for (int i = 0; i < input.length(); i++) {
                if (input.charAt(i) == ',') {
                    south = Integer.parseInt(input.substring(0, i));
                    input = input.substring(i + 1);
                    break;
                }
            }
            for (int i = 0; i < input.length(); i++) {
                if (input.charAt(i) == '}') {
                    west = Integer.parseInt(input.substring(0, i));
                    break;
                }
            }
            rooms[temp] = new Room(roomNum, roomName, north, east, south, west);
            temp++;
        }
        fr.close();
        br.close();
    }

    /**
     * creates all the room descriptions
     * @param rooms
     * @throws FileNotFoundException
     * @throws IOException
     */
    public void createRoomDescriptions(Room[] rooms) throws FileNotFoundException, IOException {
        FileReader fr = new FileReader("src\\TextDocuments\\RoomDescriptions.txt");
        BufferedReader br = new BufferedReader(fr);
        String input = "";
        rooms[0].setDescription("");
        int i = 0;
        while ((input = br.readLine()) != null || i < 21) {
            rooms[i].setDescription(input);
            i++;
        }
        fr.close();
    }

    /**
     * changes the icon image of a jlabel to show what room the player currently is in
     * @param currentRoom
     * @param you
     */
    public void setupRoomImages(Room currentRoom, MainCharacter you) {
        score.setText("" + you.getScore());
        int roomNumber = currentRoom.getRoomNum();
        ImageIcon icon;
        if (roomNumber == 4 || roomNumber == 3 || roomNumber == 6 || roomNumber == 8 || roomNumber == 18) {
            icon = new ImageIcon("src\\Images\\Trail3.jpg");
            RoomImage.setIcon(icon);
        }
        if (roomNumber == 12 || roomNumber == 14 || roomNumber == 11) {
            icon = new ImageIcon("src\\Images\\Trail6.jpg");
            RoomImage.setIcon(icon);
        }
        if (roomNumber == 7 || roomNumber == 16) {
            icon = new ImageIcon("src\\Images\\Trail2.jpg");
            RoomImage.setIcon(icon);
        }
        if (roomNumber == 15) {
            icon = new ImageIcon("src\\Images\\SpringShelter.jpg");
            RoomImage.setIcon(icon);
        }
        if (roomNumber == 10 || roomNumber == 17) {
            icon = new ImageIcon("src\\Images\\Trail7.jpg");
            RoomImage.setIcon(icon);
        }
        if (roomNumber == 9 || roomNumber == 13) {
            icon = new ImageIcon("src\\Images\\Trail9.jpg");
            RoomImage.setIcon(icon);
        }
        if (roomNumber == 2) {
            icon = new ImageIcon("src\\Images\\Inn.jpg");
            RoomImage.setIcon(icon);
        }
        if (roomNumber == 19) {
            icon = new ImageIcon("src\\Images\\BoatRental.jpg");
            RoomImage.setIcon(icon);
        }
        if (roomNumber == 5) {
            icon = new ImageIcon("src\\Images\\LakeLonidaw.jpg");
            RoomImage.setIcon(icon);
        }
        if (roomNumber == 0) {
            icon = new ImageIcon("src\\Images\\EnteranceSign.jpg");
            RoomImage.setIcon(icon);
        }
        if (roomNumber == 1) {
            icon = new ImageIcon("src\\Images\\ParkingLot.jpg");
            RoomImage.setIcon(icon);
        }
    }

    /**
     * creates the list of objects in each room
     * @param objects
     * @throws FileNotFoundException
     * @throws IOException
     */
    public void createObjects(Object[] objects) throws FileNotFoundException, IOException {
        FileReader fr = new FileReader("src\\TextDocuments\\Objects.txt");
        BufferedReader br = new BufferedReader(fr);
        String input;
        int temp = 0;
        String objectName = "";
        int roomNumber = -1;
        int pointValue = 0;
        //Name--Room--Point
        while ((input = br.readLine()) != null) {
            for (int i = 0; i < input.length(); i++) {
                if (input.charAt(i) == '-' && input.charAt(i + 1) == '-') {
                    objectName = input.substring(0, i);
                    input = input.substring(i + 2);
                    break;
                }
            }
            for (int i = 0; i < input.length(); i++) {
                if (input.charAt(i) == '-' && input.charAt(i + 1) == '-') {
                    roomNumber = Integer.parseInt(input.substring(0, i));
                    input = input.substring(i + 2);
                    break;
                }
            }
            for (int i = 0; i < input.length(); i++) {
                pointValue = Integer.parseInt(input);
                break;
            }
            objects[temp] = new Object(objectName, roomNumber, pointValue);
            temp++;
        }
        fr.close();
        br.close();
    }

    /**
     * places the objects previously created into the rooms
     * @param objects
     * @param rooms
     */
    public void placeObjectsInRoom(Object[] objects, Room[] rooms) {
        for (int i = 0; i < 8; i++) {
            switch (i) {
                case 0:
                    rooms[18].spawnItem(objects[i]);
                    break;
                case 1:
                    rooms[0].spawnItem(objects[i]);
                    break;
                case 2:
                    rooms[14].spawnItem(objects[i]);
                    break;
                case 3:
                    rooms[19].spawnItem(objects[i]);
                    break;
                case 4:
                    rooms[15].spawnItem(objects[i]);
                    break;
                case 5:
                    rooms[10].spawnItem(objects[i]);
                    break;
                case 6:
                    rooms[13].spawnItem(objects[i]);
                    break;
                case 7:
                    rooms[2].spawnItem(objects[i]);
                    break;
            }
        }
    }

    /**
     * updates the text area where the player gets information from
     * @param updater
     * @throws FileNotFoundException
     * @throws IOException
     */
    public void updateInfoPanel(String updater) throws FileNotFoundException, IOException {
        PrintWriter writer = new PrintWriter(new BufferedWriter(new FileWriter("src\\TextDocuments\\outputText.txt", true)));
        writer.println(updater);
        writer.close();
        OldTextInfo.setText(updater);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CommandLine;
    private javax.swing.JLabel Map;
    private javax.swing.JTextArea OldTextInfo;
    private javax.swing.JLabel RoomImage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel score;
    private javax.swing.JButton submitCommand;
    // End of variables declaration//GEN-END:variables
}
